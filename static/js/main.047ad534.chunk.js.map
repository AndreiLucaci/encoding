{"version":3,"sources":["services/index.ts","services/codecs/base64.ts","services/codecs/html.ts","services/codecs/url.ts","services/codecService.ts","services/error/errorHandler.ts","components/codec/CodecTable.tsx","components/codec/Codec.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Base64Codec","input","_","isEmpty","errorHandler","withError","btoa","atob","HtmlCodec","replace","UrlCodec","encodeURI","decodeURI","codecService","html","url","base64","action","err","message","CodecTable","props","onClick","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Typography","variant","ButtonGroup","size","color","Button","encode","decode","Codec","useState","setInput","Container","style","position","top","TextField","id","label","multiline","value","rows","onChange","event","target","margin","fullWidth","placeholder","marginBottom","result","App","className","marginTop","elevation","Link","href","Date","getFullYear","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","background","paper","primary","main","contrastText","text","secondary","ReactDOM","render","StrictMode","ThemeProvider","maxWidth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.047ad534.chunk.js","sourcesContent":["export { codecService } from \"./codecService\";\nexport { errorHandler } from \"./error\";\nexport * from \"./types\";\n","import _ from \"lodash\";\nimport { ICodec, errorHandler } from \"..\";\n\nexport class Base64Codec implements ICodec {\n  encode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => btoa(input));\n  }\n\n  decode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => atob(input));\n  }\n}\n","import _ from \"lodash\";\nimport { ICodec, errorHandler } from \"..\";\n\nexport class HtmlCodec implements ICodec {\n  encode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => {\n      return input\n        .replace(/&/g, \"&amp;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#39;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n    });\n  }\n\n  decode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => {\n      return input\n        .replace(/&quot;/g, '\"')\n        .replace(/&#39;/g, \"'\")\n        .replace(/&lt;/g, \"<\")\n        .replace(/&gt;/g, \">\")\n        .replace(/&amp;/g, \"&\");\n    });\n  }\n}\n","import _ from \"lodash\";\nimport { ICodec, errorHandler } from \"..\";\n\nexport class UrlCodec implements ICodec {\n  encode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => encodeURI(input));\n  }\n\n  decode(input: string): string {\n    if (_.isEmpty(input)) {\n      return input;\n    }\n\n    return errorHandler.withError(() => decodeURI(input));\n  }\n}\n","import { Base64Codec, HtmlCodec, UrlCodec } from \"./codecs\";\nimport { ICodecService, ICodec } from \"./types\";\n\nclass CodecService implements ICodecService {\n  html: ICodec = new HtmlCodec();\n  url: ICodec = new UrlCodec();\n  base64: ICodec = new Base64Codec();\n}\n\nexport const codecService: ICodecService = new CodecService();\n","interface IErrorHandler {\n  withError(action: () => string): string;\n}\n\nclass ErrorHandler implements IErrorHandler {\n  withError(action: () => string): string {\n    try {\n      return action();\n    } catch (err) {\n      return err.message;\n    }\n  }\n}\n\nexport const errorHandler: IErrorHandler = new ErrorHandler();\n","import React from \"react\";\nimport {\n  Paper,\n  Typography,\n  ButtonGroup,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\n\nimport { codecService } from \"../../services\";\n\ntype CodecTableType = {\n  onClick: (action: (input: string) => string) => void;\n};\n\nexport const CodecTable = (props: CodecTableType) => {\n  const { onClick } = props;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\">Codec</TableCell>\n            <TableCell align=\"center\">Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell align=\"center\">\n              <Typography variant=\"button\">URL Codec</Typography>\n            </TableCell>\n            <TableCell align=\"center\">\n              <ButtonGroup\n                size=\"large\"\n                color=\"primary\"\n                aria-label=\"large outlined primary button group\"\n              >\n                <Button onClick={() => onClick(codecService.url.encode)}>\n                  encode\n                </Button>\n                <Button onClick={() => onClick(codecService.url.decode)}>\n                  decode\n                </Button>\n              </ButtonGroup>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">\n              <Typography variant=\"button\">HTML Codec</Typography>\n            </TableCell>\n            <TableCell align=\"center\">\n              <ButtonGroup\n                size=\"large\"\n                color=\"primary\"\n                aria-label=\"large outlined primary button group\"\n              >\n                <Button onClick={() => onClick(codecService.html.encode)}>\n                  encode\n                </Button>\n                <Button onClick={() => onClick(codecService.html.decode)}>\n                  decode\n                </Button>\n              </ButtonGroup>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell align=\"center\">\n              <Typography variant=\"button\">Base64 Codec</Typography>\n            </TableCell>\n            <TableCell align=\"center\">\n              <ButtonGroup\n                size=\"large\"\n                color=\"primary\"\n                aria-label=\"large outlined primary button group\"\n              >\n                <Button onClick={() => onClick(codecService.base64.encode)}>\n                  encode\n                </Button>\n                <Button onClick={() => onClick(codecService.base64.decode)}>\n                  decode\n                </Button>\n              </ButtonGroup>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default CodecTable;\n","import React, { useState } from \"react\";\n\nimport { Typography, TextField, Container } from \"@material-ui/core\";\n\nimport CodecTable from \"./CodecTable\";\n\nconst Codec = () => {\n  const [input, setInput] = useState(\"\");\n\n  const onClick = (action: (input: string) => string) => {\n    const result = action(input);\n\n    setInput(result);\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setInput(event.target.value);\n  };\n\n  return (\n    <Container>\n      <Typography\n        variant=\"h2\"\n        style={{\n          position: \"relative\",\n          top: 0,\n        }}\n        color=\"textPrimary\"\n      >\n        Encoding / decoding utility service\n      </Typography>\n\n      <TextField\n        color={\"primary\"}\n        id=\"filled-multiline-static\"\n        label=\"Working zone\"\n        multiline\n        value={input}\n        rows={14}\n        onChange={handleChange}\n        style={{\n          margin: \"20px 0 20px 0\",\n        }}\n        fullWidth={true}\n        placeholder=\"Insert your text here\"\n        variant=\"standard\"\n      />\n\n      <div style={{ margin: \"20px 0 10px 0\" }}>\n        <Typography\n          variant=\"h5\"\n          color=\"textPrimary\"\n          style={{\n            marginBottom: 20,\n          }}\n        >\n          {\" \"}\n          Choose your codec{\" \"}\n        </Typography>\n      </div>\n\n      <CodecTable onClick={onClick} />\n    </Container>\n  );\n};\n\nexport default Codec;\n","import React from \"react\";\nimport { Paper, Typography, Link } from \"@material-ui/core\";\nimport \"./App.css\";\n\nimport Codec from \"./components/codec\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Codec />\n\n      <Paper style={{ marginTop: 50, marginBottom: 10 }} elevation={0}>\n        <Typography variant=\"subtitle1\">\n          by:{\" \"}\n          <Link\n            href=\"https://github.com/AndreiLucaci\"\n            className=\"orange\"\n            color=\"textSecondary\"\n          >\n            AndreiLucaci\n          </Link>\n          , © {new Date().getFullYear()} Andrei Lucaci, All rights reserved.\n        </Typography>\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Container } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport \"fontsource-roboto\";\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      paper: \"#2a312a\",\n    },\n    primary: {\n      main: \"#f4900e\",\n      contrastText: \"#28382b\",\n    },\n    text: {\n      primary: \"#f6f6f6\",\n      secondary: \"#f1802d\",\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"lg\">\n        <div className=\"App\">\n          <React.StrictMode>\n            <App />\n          </React.StrictMode>\n        </div>\n      </Container>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}